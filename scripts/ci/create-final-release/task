#!/bin/bash
set -ex

# Cannot set -u before sourcing .bashrc because of all
# the unbound variables in things beyond our control.
source ~/.bashrc

set -u

root_dir="${PWD}"

# Inputs
RELEASE_NAME="${RELEASE_NAME:?"\$RELEASE_NAME not set"}"
RUNTIME_CI_DIR="${root_dir}/${RUNTIME_CI_DIR:?"\$RUNTIME_CI_DIR not set"}"
STACK_REPO_DIR="${root_dir}/${STACK_REPO_DIR:?"\$STACK_REPO_DIR not set"}"
RELEASE_REPO_DIR="${root_dir}/${RELEASE_REPO_DIR:?"\$RELEASE_REPO_DIR not set"}"

# Outputs
FINAL_RELEASE_REPO_DIR="${root_dir}/${FINAL_RELEASE_REPO_DIR:?"\$FINAL_RELEASE_REPO_DIR not set"}"

MASTER_BRANCH="${MASTER_BRANCH:-master}"

set +x
  source "${STACK_REPO_DIR}/aws_environment"

  "${AWS_DEFAULT_REGION:?"AWS_DEFAULT_REGION is not set"}"
  "${AWS_ACCESS_KEY_ID:?"AWS_ACCESS_KEY_ID is not set"}"
  "${AWS_SECRET_ACCESS_KEY:?"AWS_SECRET_ACCESS_KEY is not set"}"
set -x

BLOBS_BUCKET_ACCESS_KEY_ID=$(aws cloudformation describe-stacks --stack-name "${RELEASE_NAME}-buckets" \
  | jq .Stacks[0].Outputs[0].OutputValue)
BLOBS_BUCKET_SECRET_KEY=$(aws cloudformation describe-stacks --stack-name "${RELEASE_NAME}-buckets" \
  | jq .Stacks[0].Outputs[1].OutputValue)

set -x

cat > "${RELEASE_REPO_DIR}/config//private.yml" <<EOF
---
blobstore:
  s3:
    secret_access_key: ${BLOBS_BUCKET_SECRET_KEY}
    access_key_id: ${BLOBS_BUCKET_ACCESS_KEY_ID}
EOF

pushd release-repo > /dev/null
  git config user.name "CF MEGA BOT"
  git config user.email "cf-mega@pivotal.io"

  git remote add -f master-repo ../release-repo-master
  git merge "master-repo/${MASTER_BRANCH}" -m 'Merge with master'

  for _ in {1..5}; do
    bosh -n create release --with-tarball --final
    EXIT_STATUS=${PIPESTATUS[0]}
    if [ "$EXIT_STATUS" = "0" ]; then
      break
    fi
  done

  if [ ! "$EXIT_STATUS" = "0" ]; then
    echo "Failed to Create $RELEASE_NAME Release"
    exit "$EXIT_STATUS"
  fi

  new_release_version=$(find releases -regex ".*${RELEASE_NAME}-[0-9]*.yml" | egrep -o "${RELEASE_NAME}-[0-9]+" | egrep -o "[0-9]+" | sort -n | tail -n 1)

  git add .final_builds releases
  git commit -m "Final release ${new_release_version}"
  echo "${new_release_version}" > version_number
popd > /dev/null

shopt -s dotglob
cp -R release-repo/* "${FINAL_RELEASE_REPO_DIR}"
