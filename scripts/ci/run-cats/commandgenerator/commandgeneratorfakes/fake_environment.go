// This file was generated by counterfeiter
package commandgeneratorfakes

import (
	"sync"

	"github.com/cloudfoundry/runtime-ci/scripts/ci/run-cats/commandgenerator"
)

type FakeEnvironment struct {
	GetSkipDiegoSSHStub        func() (string, error)
	getSkipDiegoSSHMutex       sync.RWMutex
	getSkipDiegoSSHArgsForCall []struct{}
	getSkipDiegoSSHReturns     struct {
		result1 string
		result2 error
	}
	GetSkipV3Stub        func() (string, error)
	getSkipV3Mutex       sync.RWMutex
	getSkipV3ArgsForCall []struct{}
	getSkipV3Returns     struct {
		result1 string
		result2 error
	}
	GetSkipSSOStub        func() (string, error)
	getSkipSSOMutex       sync.RWMutex
	getSkipSSOArgsForCall []struct{}
	getSkipSSOReturns     struct {
		result1 string
		result2 error
	}
	GetSkipDiegoDockerStub        func() (string, error)
	getSkipDiegoDockerMutex       sync.RWMutex
	getSkipDiegoDockerArgsForCall []struct{}
	getSkipDiegoDockerReturns     struct {
		result1 string
		result2 error
	}
	GetSkipBackendCompatibilityStub        func() (string, error)
	getSkipBackendCompatibilityMutex       sync.RWMutex
	getSkipBackendCompatibilityArgsForCall []struct{}
	getSkipBackendCompatibilityReturns     struct {
		result1 string
		result2 error
	}
	GetSkipSecurityGroupsStub        func() (string, error)
	getSkipSecurityGroupsMutex       sync.RWMutex
	getSkipSecurityGroupsArgsForCall []struct{}
	getSkipSecurityGroupsReturns     struct {
		result1 string
		result2 error
	}
	GetSkipInternetDependentStub        func() (string, error)
	getSkipInternetDependentMutex       sync.RWMutex
	getSkipInternetDependentArgsForCall []struct{}
	getSkipInternetDependentReturns     struct {
		result1 string
		result2 error
	}
	GetSkipServicesStub        func() (string, error)
	getSkipServicesMutex       sync.RWMutex
	getSkipServicesArgsForCall []struct{}
	getSkipServicesReturns     struct {
		result1 string
		result2 error
	}
	GetSkipRouteServicesStub        func() (string, error)
	getSkipRouteServicesMutex       sync.RWMutex
	getSkipRouteServicesArgsForCall []struct{}
	getSkipRouteServicesReturns     struct {
		result1 string
		result2 error
	}
	GetBackendStub        func() (string, error)
	getBackendMutex       sync.RWMutex
	getBackendArgsForCall []struct{}
	getBackendReturns     struct {
		result1 string
		result2 error
	}
	GetCatsPathStub        func() string
	getCatsPathMutex       sync.RWMutex
	getCatsPathArgsForCall []struct{}
	getCatsPathReturns     struct {
		result1 string
	}
	GetNodesStub        func() (int, error)
	getNodesMutex       sync.RWMutex
	getNodesArgsForCall []struct{}
	getNodesReturns     struct {
		result1 int
		result2 error
	}
	GetGoPathStub        func() string
	getGoPathMutex       sync.RWMutex
	getGoPathArgsForCall []struct{}
	getGoPathReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEnvironment) GetSkipDiegoSSH() (string, error) {
	fake.getSkipDiegoSSHMutex.Lock()
	fake.getSkipDiegoSSHArgsForCall = append(fake.getSkipDiegoSSHArgsForCall, struct{}{})
	fake.recordInvocation("GetSkipDiegoSSH", []interface{}{})
	fake.getSkipDiegoSSHMutex.Unlock()
	if fake.GetSkipDiegoSSHStub != nil {
		return fake.GetSkipDiegoSSHStub()
	} else {
		return fake.getSkipDiegoSSHReturns.result1, fake.getSkipDiegoSSHReturns.result2
	}
}

func (fake *FakeEnvironment) GetSkipDiegoSSHCallCount() int {
	fake.getSkipDiegoSSHMutex.RLock()
	defer fake.getSkipDiegoSSHMutex.RUnlock()
	return len(fake.getSkipDiegoSSHArgsForCall)
}

func (fake *FakeEnvironment) GetSkipDiegoSSHReturns(result1 string, result2 error) {
	fake.GetSkipDiegoSSHStub = nil
	fake.getSkipDiegoSSHReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetSkipV3() (string, error) {
	fake.getSkipV3Mutex.Lock()
	fake.getSkipV3ArgsForCall = append(fake.getSkipV3ArgsForCall, struct{}{})
	fake.recordInvocation("GetSkipV3", []interface{}{})
	fake.getSkipV3Mutex.Unlock()
	if fake.GetSkipV3Stub != nil {
		return fake.GetSkipV3Stub()
	} else {
		return fake.getSkipV3Returns.result1, fake.getSkipV3Returns.result2
	}
}

func (fake *FakeEnvironment) GetSkipV3CallCount() int {
	fake.getSkipV3Mutex.RLock()
	defer fake.getSkipV3Mutex.RUnlock()
	return len(fake.getSkipV3ArgsForCall)
}

func (fake *FakeEnvironment) GetSkipV3Returns(result1 string, result2 error) {
	fake.GetSkipV3Stub = nil
	fake.getSkipV3Returns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetSkipSSO() (string, error) {
	fake.getSkipSSOMutex.Lock()
	fake.getSkipSSOArgsForCall = append(fake.getSkipSSOArgsForCall, struct{}{})
	fake.recordInvocation("GetSkipSSO", []interface{}{})
	fake.getSkipSSOMutex.Unlock()
	if fake.GetSkipSSOStub != nil {
		return fake.GetSkipSSOStub()
	} else {
		return fake.getSkipSSOReturns.result1, fake.getSkipSSOReturns.result2
	}
}

func (fake *FakeEnvironment) GetSkipSSOCallCount() int {
	fake.getSkipSSOMutex.RLock()
	defer fake.getSkipSSOMutex.RUnlock()
	return len(fake.getSkipSSOArgsForCall)
}

func (fake *FakeEnvironment) GetSkipSSOReturns(result1 string, result2 error) {
	fake.GetSkipSSOStub = nil
	fake.getSkipSSOReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetSkipDiegoDocker() (string, error) {
	fake.getSkipDiegoDockerMutex.Lock()
	fake.getSkipDiegoDockerArgsForCall = append(fake.getSkipDiegoDockerArgsForCall, struct{}{})
	fake.recordInvocation("GetSkipDiegoDocker", []interface{}{})
	fake.getSkipDiegoDockerMutex.Unlock()
	if fake.GetSkipDiegoDockerStub != nil {
		return fake.GetSkipDiegoDockerStub()
	} else {
		return fake.getSkipDiegoDockerReturns.result1, fake.getSkipDiegoDockerReturns.result2
	}
}

func (fake *FakeEnvironment) GetSkipDiegoDockerCallCount() int {
	fake.getSkipDiegoDockerMutex.RLock()
	defer fake.getSkipDiegoDockerMutex.RUnlock()
	return len(fake.getSkipDiegoDockerArgsForCall)
}

func (fake *FakeEnvironment) GetSkipDiegoDockerReturns(result1 string, result2 error) {
	fake.GetSkipDiegoDockerStub = nil
	fake.getSkipDiegoDockerReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetSkipBackendCompatibility() (string, error) {
	fake.getSkipBackendCompatibilityMutex.Lock()
	fake.getSkipBackendCompatibilityArgsForCall = append(fake.getSkipBackendCompatibilityArgsForCall, struct{}{})
	fake.recordInvocation("GetSkipBackendCompatibility", []interface{}{})
	fake.getSkipBackendCompatibilityMutex.Unlock()
	if fake.GetSkipBackendCompatibilityStub != nil {
		return fake.GetSkipBackendCompatibilityStub()
	} else {
		return fake.getSkipBackendCompatibilityReturns.result1, fake.getSkipBackendCompatibilityReturns.result2
	}
}

func (fake *FakeEnvironment) GetSkipBackendCompatibilityCallCount() int {
	fake.getSkipBackendCompatibilityMutex.RLock()
	defer fake.getSkipBackendCompatibilityMutex.RUnlock()
	return len(fake.getSkipBackendCompatibilityArgsForCall)
}

func (fake *FakeEnvironment) GetSkipBackendCompatibilityReturns(result1 string, result2 error) {
	fake.GetSkipBackendCompatibilityStub = nil
	fake.getSkipBackendCompatibilityReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetSkipSecurityGroups() (string, error) {
	fake.getSkipSecurityGroupsMutex.Lock()
	fake.getSkipSecurityGroupsArgsForCall = append(fake.getSkipSecurityGroupsArgsForCall, struct{}{})
	fake.recordInvocation("GetSkipSecurityGroups", []interface{}{})
	fake.getSkipSecurityGroupsMutex.Unlock()
	if fake.GetSkipSecurityGroupsStub != nil {
		return fake.GetSkipSecurityGroupsStub()
	} else {
		return fake.getSkipSecurityGroupsReturns.result1, fake.getSkipSecurityGroupsReturns.result2
	}
}

func (fake *FakeEnvironment) GetSkipSecurityGroupsCallCount() int {
	fake.getSkipSecurityGroupsMutex.RLock()
	defer fake.getSkipSecurityGroupsMutex.RUnlock()
	return len(fake.getSkipSecurityGroupsArgsForCall)
}

func (fake *FakeEnvironment) GetSkipSecurityGroupsReturns(result1 string, result2 error) {
	fake.GetSkipSecurityGroupsStub = nil
	fake.getSkipSecurityGroupsReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetSkipInternetDependent() (string, error) {
	fake.getSkipInternetDependentMutex.Lock()
	fake.getSkipInternetDependentArgsForCall = append(fake.getSkipInternetDependentArgsForCall, struct{}{})
	fake.recordInvocation("GetSkipInternetDependent", []interface{}{})
	fake.getSkipInternetDependentMutex.Unlock()
	if fake.GetSkipInternetDependentStub != nil {
		return fake.GetSkipInternetDependentStub()
	} else {
		return fake.getSkipInternetDependentReturns.result1, fake.getSkipInternetDependentReturns.result2
	}
}

func (fake *FakeEnvironment) GetSkipInternetDependentCallCount() int {
	fake.getSkipInternetDependentMutex.RLock()
	defer fake.getSkipInternetDependentMutex.RUnlock()
	return len(fake.getSkipInternetDependentArgsForCall)
}

func (fake *FakeEnvironment) GetSkipInternetDependentReturns(result1 string, result2 error) {
	fake.GetSkipInternetDependentStub = nil
	fake.getSkipInternetDependentReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetSkipServices() (string, error) {
	fake.getSkipServicesMutex.Lock()
	fake.getSkipServicesArgsForCall = append(fake.getSkipServicesArgsForCall, struct{}{})
	fake.recordInvocation("GetSkipServices", []interface{}{})
	fake.getSkipServicesMutex.Unlock()
	if fake.GetSkipServicesStub != nil {
		return fake.GetSkipServicesStub()
	} else {
		return fake.getSkipServicesReturns.result1, fake.getSkipServicesReturns.result2
	}
}

func (fake *FakeEnvironment) GetSkipServicesCallCount() int {
	fake.getSkipServicesMutex.RLock()
	defer fake.getSkipServicesMutex.RUnlock()
	return len(fake.getSkipServicesArgsForCall)
}

func (fake *FakeEnvironment) GetSkipServicesReturns(result1 string, result2 error) {
	fake.GetSkipServicesStub = nil
	fake.getSkipServicesReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetSkipRouteServices() (string, error) {
	fake.getSkipRouteServicesMutex.Lock()
	fake.getSkipRouteServicesArgsForCall = append(fake.getSkipRouteServicesArgsForCall, struct{}{})
	fake.recordInvocation("GetSkipRouteServices", []interface{}{})
	fake.getSkipRouteServicesMutex.Unlock()
	if fake.GetSkipRouteServicesStub != nil {
		return fake.GetSkipRouteServicesStub()
	} else {
		return fake.getSkipRouteServicesReturns.result1, fake.getSkipRouteServicesReturns.result2
	}
}

func (fake *FakeEnvironment) GetSkipRouteServicesCallCount() int {
	fake.getSkipRouteServicesMutex.RLock()
	defer fake.getSkipRouteServicesMutex.RUnlock()
	return len(fake.getSkipRouteServicesArgsForCall)
}

func (fake *FakeEnvironment) GetSkipRouteServicesReturns(result1 string, result2 error) {
	fake.GetSkipRouteServicesStub = nil
	fake.getSkipRouteServicesReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetBackend() (string, error) {
	fake.getBackendMutex.Lock()
	fake.getBackendArgsForCall = append(fake.getBackendArgsForCall, struct{}{})
	fake.recordInvocation("GetBackend", []interface{}{})
	fake.getBackendMutex.Unlock()
	if fake.GetBackendStub != nil {
		return fake.GetBackendStub()
	} else {
		return fake.getBackendReturns.result1, fake.getBackendReturns.result2
	}
}

func (fake *FakeEnvironment) GetBackendCallCount() int {
	fake.getBackendMutex.RLock()
	defer fake.getBackendMutex.RUnlock()
	return len(fake.getBackendArgsForCall)
}

func (fake *FakeEnvironment) GetBackendReturns(result1 string, result2 error) {
	fake.GetBackendStub = nil
	fake.getBackendReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetCatsPath() string {
	fake.getCatsPathMutex.Lock()
	fake.getCatsPathArgsForCall = append(fake.getCatsPathArgsForCall, struct{}{})
	fake.recordInvocation("GetCatsPath", []interface{}{})
	fake.getCatsPathMutex.Unlock()
	if fake.GetCatsPathStub != nil {
		return fake.GetCatsPathStub()
	} else {
		return fake.getCatsPathReturns.result1
	}
}

func (fake *FakeEnvironment) GetCatsPathCallCount() int {
	fake.getCatsPathMutex.RLock()
	defer fake.getCatsPathMutex.RUnlock()
	return len(fake.getCatsPathArgsForCall)
}

func (fake *FakeEnvironment) GetCatsPathReturns(result1 string) {
	fake.GetCatsPathStub = nil
	fake.getCatsPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeEnvironment) GetNodes() (int, error) {
	fake.getNodesMutex.Lock()
	fake.getNodesArgsForCall = append(fake.getNodesArgsForCall, struct{}{})
	fake.recordInvocation("GetNodes", []interface{}{})
	fake.getNodesMutex.Unlock()
	if fake.GetNodesStub != nil {
		return fake.GetNodesStub()
	} else {
		return fake.getNodesReturns.result1, fake.getNodesReturns.result2
	}
}

func (fake *FakeEnvironment) GetNodesCallCount() int {
	fake.getNodesMutex.RLock()
	defer fake.getNodesMutex.RUnlock()
	return len(fake.getNodesArgsForCall)
}

func (fake *FakeEnvironment) GetNodesReturns(result1 int, result2 error) {
	fake.GetNodesStub = nil
	fake.getNodesReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvironment) GetGoPath() string {
	fake.getGoPathMutex.Lock()
	fake.getGoPathArgsForCall = append(fake.getGoPathArgsForCall, struct{}{})
	fake.recordInvocation("GetGoPath", []interface{}{})
	fake.getGoPathMutex.Unlock()
	if fake.GetGoPathStub != nil {
		return fake.GetGoPathStub()
	} else {
		return fake.getGoPathReturns.result1
	}
}

func (fake *FakeEnvironment) GetGoPathCallCount() int {
	fake.getGoPathMutex.RLock()
	defer fake.getGoPathMutex.RUnlock()
	return len(fake.getGoPathArgsForCall)
}

func (fake *FakeEnvironment) GetGoPathReturns(result1 string) {
	fake.GetGoPathStub = nil
	fake.getGoPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeEnvironment) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSkipDiegoSSHMutex.RLock()
	defer fake.getSkipDiegoSSHMutex.RUnlock()
	fake.getSkipV3Mutex.RLock()
	defer fake.getSkipV3Mutex.RUnlock()
	fake.getSkipSSOMutex.RLock()
	defer fake.getSkipSSOMutex.RUnlock()
	fake.getSkipDiegoDockerMutex.RLock()
	defer fake.getSkipDiegoDockerMutex.RUnlock()
	fake.getSkipBackendCompatibilityMutex.RLock()
	defer fake.getSkipBackendCompatibilityMutex.RUnlock()
	fake.getSkipSecurityGroupsMutex.RLock()
	defer fake.getSkipSecurityGroupsMutex.RUnlock()
	fake.getSkipInternetDependentMutex.RLock()
	defer fake.getSkipInternetDependentMutex.RUnlock()
	fake.getSkipServicesMutex.RLock()
	defer fake.getSkipServicesMutex.RUnlock()
	fake.getSkipRouteServicesMutex.RLock()
	defer fake.getSkipRouteServicesMutex.RUnlock()
	fake.getBackendMutex.RLock()
	defer fake.getBackendMutex.RUnlock()
	fake.getCatsPathMutex.RLock()
	defer fake.getCatsPathMutex.RUnlock()
	fake.getNodesMutex.RLock()
	defer fake.getNodesMutex.RUnlock()
	fake.getGoPathMutex.RLock()
	defer fake.getGoPathMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEnvironment) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commandgenerator.Environment = new(FakeEnvironment)
