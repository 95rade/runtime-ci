#!/bin/bash
set -exu

root_dir="${PWD}"

# Inputs
RELEASE_NAME="${RELEASE_NAME:?"\$RELEASE_NAME not set"}"

# Outputs
OUTPUT_DIR="${root_dir}/${OUTPUT_DIR:?"\$OUTPUT_DIR not set"}"

VERSION="$(date +%s)" # current time in seconds

if [[ ! -z "$RELEASE_DIR" ]]; then
  ln -s release-repo "$RELEASE_DIR"
  cd "$RELEASE_DIR"
else
  cd release-repo
fi

echo "Running scripts/update"
./scripts/update

COMMIT_SHA=$(git rev-parse HEAD)

RELEASE_OUT="../create-release.out"
for i in {1..5}; do
  echo "Syncing blobs, attempt $i"
  bosh -n --parallel 10 sync blobs && break
done

for i in {1..5}; do
  echo "Creating release, attempt $i"
  bosh -n create release --with-tarball --version "${VERSION}" | tee -a "${RELEASE_OUT}"
  EXIT_STATUS=${PIPESTATUS[0]}
  if [ "$EXIT_STATUS" = "0" ]; then
    break
  fi
done

if [ ! "$EXIT_STATUS" = "0" ]; then
  echo "Failed to Create ${RELEASE_NAME} Release"
  exit "${EXIT_STATUS}"
fi

FOUND_VERSION=$(grep -a "Release version" "${RELEASE_OUT}" | cut -d " " -f3)
if [ "${FOUND_VERSION}" = "" ]; then
  echo "No Release Version Found"
  exit 1
fi

MANIFEST_YML=$(grep -a "Release manifest" $RELEASE_OUT  | cut -d " " -f3)
if [ "$MANIFEST_YML" = "" ]; then
  echo "No Release Manifest Found"
  exit 1
fi

TARBALL=$(grep -a "Release tarball" $RELEASE_OUT | cut -d " " -f4)
if [ "$TARBALL" = "" ]; then
  echo "No Release Tarball Found"
  exit 1
fi

mv "${MANIFEST_YML}" "${OUTPUT_DIR}/dev-manifest.yml"
mv "${TARBALL}" "${OUTPUT_DIR}/${RELEASE_NAME}-${FOUND_VERSION}-${COMMIT_SHA}.tgz"
mv "${RELEASE_OUT}" "${OUTPUT_DIR}/"
