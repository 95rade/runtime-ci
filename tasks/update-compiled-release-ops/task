#!/bin/bash -exu

function update_release() {
  local release_name
  release_name="$1"
  local compiled_release_ops_file
  compiled_release_ops_file="$2"
  local release_sha
  release_sha=$(sha1sum compiled-release-tarball/*.tgz | awk '{print $1}')
  local release_tarball
  pushd compiled-release-tarball
    release_tarball=$(ls *.tgz)
  popd
  local release_version
  release_version=$(cat bosh-io-release/version)

  update_release_ops_file=$(mktemp)

(
cat << EOF
---
- type: replace
  path: /path=~1releases~1name=${release_name}/url
  value: https://storage.googleapis.com/cf-deployment-compiled-releases/${release_tarball}
- type: replace
  path: /path=~1releases~1name=${release_name}/version
  value: "${release_version}"
- type: replace
  path: /path=~1releases~1name=${release_name}/sha1
  value: "${release_sha}"
EOF
) > $update_release_ops_file

  bosh interpolate $compiled_release_ops_file -o $update_release_ops_file
}

function main() {
  git clone ops-files updated-ops-files

  update_release $RELEASE_NAME ops-files/operations/use-compiled-releases.yml > updated-ops-files/operations/use-compiled-releases.yml

  pushd updated-ops-files
    if [[ -n $(git status --porcelain) ]]; then
      git add operations/use-compiled-releases.yml
    fi
  popd
}

main
