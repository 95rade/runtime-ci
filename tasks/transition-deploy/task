#!/bin/bash -eux

# shellcheck disable=SC1091
source runtime-ci/tasks/cf-deployment-concourse-tasks/shared-functions

write_uptimer_deploy_config() {
  local deployment_name
  deployment_name=${1}

  local manifest
  manifest=${2}

  set +x
  echo "\"${RUMP_DEPLOYMENTS}\"" | jq --arg cf_api api.${SYSTEM_DOMAIN} \
    --arg admin_password $(bosh int --path=/cf_admin_password vars-store/"${VARS_STORE_FILE}") \
    --arg app_domain ${UPTIMER_APP_DOMAIN} \
    --arg manifest $manifest \
    --arg deployment_name $deployment_name \
    --arg run_app_syslog_availability ${UPTIMER_RUN_SYSLOG_MEASUREMENT} \
    --arg tcp_domain ${UPTIMER_TCP_DOMAIN} \
    --arg tcp_port ${UPTIMER_TCP_PORT} \
    '{
      "while": [
        {
          "command":"bosh",
          "command_args":["-n", "deploy", $manifest, "--tty", "-d", $deployment_name]
        },
        (split(" ") | .[] |
          {
            "command" :"bosh",
            "command_args": [
              "-n",
              "delete-deployment",
              "-d",
              .
            ]
          }
        )
      ],
      "cf": {
        "api": $cf_api,
        "app_domain": $app_domain,
        "admin_user": "admin",
        "admin_password": $admin_password,
        "tcp_domain": $tcp_domain,
        "tcp_port": $tcp_port
      },
      "allowed_failures": {
        "app_pushability": 1,
        "http_availability": 0,
        "recent_logs": 2,
        "streaming_logs": 2,
        "app_syslog_availability": 2
      },
      "optional_tests": {
        "run_app_syslog_availability": $run_app_syslog_availability
      }
    }'
  set -x
}

uptimer_bosh_deploy() {
  local deployment_name
  deployment_name=$(bosh interpolate "${INTERPOLATED_MANIFEST}" --path /name)

  uptimer_config=$(mktemp)
  write_uptimer_deploy_config "${deployment_name}" "${INTERPOLATED_MANIFEST}" > ${uptimer_config}
  set +e
  local exitStatus
  uptimer -configFile ${uptimer_config}
  return $?
}

exit_properly() {
  local exitStatus
  exitStatus="${1}"
  set -e

  # exitStatus 64 means that there was downtime, but the deployment was successful
  if [ "${FAIL_ON_DOWNTIME}" = "false" ] && [ $exitStatus == 64 ]; then
    exit 0
  fi

  exit $exitStatus
}

print_instances() {
  echo "Running bosh instances:"
  bosh instances
  echo ""
}

main() {
  check_input_params
  setup_bosh_env_vars
  if ${REGENERATE_VARS_STORE}; then
    remove_vars_store
  fi
  print_instances
    bosh_interpolate
    uptimer_bosh_deploy
    exitStatus=$?
  print_instances

  exit_properly $exitStatus
}

trap commit_vars_store EXIT

main
