#!/bin/bash -exu

ops_file_to_update() {
 local release_name
 release_name=${1}
 local release_sha
 release_sha=$(sha1sum ${release_name}-release-tarball/*.tgz | awk '{print $1}')
 local release_tarball
 pushd ${release_name}-release-tarball > /dev/null
   # shellcheck disable=SC2035
   release_tarball=$(ls *.tgz)
 popd > /dev/null
 local release_version
 release_version=$(cat ${release_name}-release/version)


cat << EOF
- type: replace
  path: /path=~1releases~1name=${release_name}~1url?
  value:
    type: replace
    path: /releases/name=${release_name}/url
    value: https://storage.googleapis.com/cf-deployment-compiled-releases/${release_tarball}
- type: replace
  path: /path=~1releases~1name=${release_name}~1version?
  value:
    type: replace
    path: /releases/name=${release_name}/version
    value: "${release_version}"
- type: replace
  path: /path=~1releases~1name=${release_name}~1sha1?
  value:
    type: replace
    path: /releases/name=${release_name}/sha1
    value: "${release_sha}"
EOF
}

append_stemcell_to_compiled() {
 local release_name
 release_name=${1}
 local stemcell_version
 stemcell_version=$(cat stemcell/version)

cat << EOF
- path: /releases/name=${release_name}/stemcell?
  type: replace
  value:
    os: ubuntu-trusty
    version: "${stemcell_version}"
EOF
}

main() {
 local releases
 releases=(
   capi
   cf-mysql
   binary-buildpack
   cf-networking
   cf-smoke-tests
   cflinuxfs2
   consul
   diego
   dotnet-core-buildpack
   garden-runc
   go-buildpack
   java-buildpack
   loggregator
   nats
   nodejs-buildpack
   php-buildpack
   python-buildpack
   routing
   ruby-buildpack
   cf-mysql
   staticfile-buildpack
   statsd-injector
   uaa
 )

 local update_release_ops_file
 update_release_ops_file=$(mktemp)
 echo "---" > ${update_release_ops_file}

 for release in ${releases[@]}; do
   ops_file_to_update ${release} >> ${update_release_ops_file}
 done

 local truncated_compiled_release_ops_file
 truncated_compiled_release_ops_file=$(mktemp)
 sed -n '/stemcell/q;p' ops-files/operations/use-compiled-releases.yml > ${truncated_compiled_release_ops_file}

 bosh interpolate "${truncated_compiled_release_ops_file}" -o "${update_release_ops_file}" \
   > updated-compiled-releases-ops-file/use-compiled-releases.yml

 for release in ${releases[@]}; do
   append_stemcell_to_compiled ${release} >> updated-compiled-releases-ops-file/use-compiled-releases.yml
 done
}

main
