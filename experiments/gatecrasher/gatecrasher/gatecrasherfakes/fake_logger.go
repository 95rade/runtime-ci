// This file was generated by counterfeiter
package gatecrasherfakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry/runtime-ci/experiments/gatecrasher/gatecrasher"
)

type FakeLogger struct {
	PrintfStub        func(format string, v ...interface{})
	printfMutex       sync.RWMutex
	printfArgsForCall []struct {
		format string
		v      []interface{}
	}
	SetFlagsStub        func(flag int)
	setFlagsMutex       sync.RWMutex
	setFlagsArgsForCall []struct {
		flag int
	}
	SetOutputStub        func(writer io.Writer)
	setOutputMutex       sync.RWMutex
	setOutputArgsForCall []struct {
		writer io.Writer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogger) Printf(format string, v ...interface{}) {
	fake.printfMutex.Lock()
	fake.printfArgsForCall = append(fake.printfArgsForCall, struct {
		format string
		v      []interface{}
	}{format, v})
	fake.recordInvocation("Printf", []interface{}{format, v})
	fake.printfMutex.Unlock()
	if fake.PrintfStub != nil {
		fake.PrintfStub(format, v...)
	}
}

func (fake *FakeLogger) PrintfCallCount() int {
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	return len(fake.printfArgsForCall)
}

func (fake *FakeLogger) PrintfArgsForCall(i int) (string, []interface{}) {
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	return fake.printfArgsForCall[i].format, fake.printfArgsForCall[i].v
}

func (fake *FakeLogger) SetFlags(flag int) {
	fake.setFlagsMutex.Lock()
	fake.setFlagsArgsForCall = append(fake.setFlagsArgsForCall, struct {
		flag int
	}{flag})
	fake.recordInvocation("SetFlags", []interface{}{flag})
	fake.setFlagsMutex.Unlock()
	if fake.SetFlagsStub != nil {
		fake.SetFlagsStub(flag)
	}
}

func (fake *FakeLogger) SetFlagsCallCount() int {
	fake.setFlagsMutex.RLock()
	defer fake.setFlagsMutex.RUnlock()
	return len(fake.setFlagsArgsForCall)
}

func (fake *FakeLogger) SetFlagsArgsForCall(i int) int {
	fake.setFlagsMutex.RLock()
	defer fake.setFlagsMutex.RUnlock()
	return fake.setFlagsArgsForCall[i].flag
}

func (fake *FakeLogger) SetOutput(writer io.Writer) {
	fake.setOutputMutex.Lock()
	fake.setOutputArgsForCall = append(fake.setOutputArgsForCall, struct {
		writer io.Writer
	}{writer})
	fake.recordInvocation("SetOutput", []interface{}{writer})
	fake.setOutputMutex.Unlock()
	if fake.SetOutputStub != nil {
		fake.SetOutputStub(writer)
	}
}

func (fake *FakeLogger) SetOutputCallCount() int {
	fake.setOutputMutex.RLock()
	defer fake.setOutputMutex.RUnlock()
	return len(fake.setOutputArgsForCall)
}

func (fake *FakeLogger) SetOutputArgsForCall(i int) io.Writer {
	fake.setOutputMutex.RLock()
	defer fake.setOutputMutex.RUnlock()
	return fake.setOutputArgsForCall[i].writer
}

func (fake *FakeLogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.printfMutex.RLock()
	defer fake.printfMutex.RUnlock()
	fake.setFlagsMutex.RLock()
	defer fake.setFlagsMutex.RUnlock()
	fake.setOutputMutex.RLock()
	defer fake.setOutputMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gatecrasher.Logger = new(FakeLogger)
